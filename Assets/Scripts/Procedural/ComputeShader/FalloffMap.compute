// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel FalloffMap

static const float pi = 3.14159265;

RWStructuredBuffer<float> falloffMap;
int mapWidth;
int mapHeight;
float maxX;
float maxY;
float2 falloffParameter;
float hexagonSize;

int xyToIndex(int2 xy)
{
    return xy.x + xy.y * mapWidth;
}

int3 arrayXYToHexPos(int2 arrayXY)
{
    int hexX = arrayXY.x - (arrayXY.y >> 1);
    int hexZ = arrayXY.y;
    return int3(hexX, -hexX - hexZ, hexZ);
}

int2 hexPosToArrayXY(int3 hexPos)
{
    int arrayX = hexPos.x + (hexPos.z >> 1);
    int arrayY = hexPos.z;
    return int2(arrayX, arrayY);
}

float2 hexPosToWorldXY(int3 hexPos)
{
    float worldX = hexPos.x * hexagonSize + hexPos.z * hexagonSize / 2;
    float worldY = hexPos.z * hexagonSize * sin(pi / 3);
    return float2(worldX, worldY);
}

[numthreads(16, 16, 1)]
void FalloffMap (int3 id : SV_DispatchThreadID)
{
	if (id.x >= mapWidth || id.y >= mapHeight)
	{
		return;
	}
	
    int3 hexPos = arrayXYToHexPos(id.xy);
	float2 worldPos = hexPosToWorldXY(hexPos);

	float x = abs(worldPos.x / maxX * 2 - 1);
	float y = abs(worldPos.y / maxY * 2 - 1);
	float value = max(x, y);

	float a = falloffParameter.x;
	float b = falloffParameter.y;
	float finalValue = 1 - (pow(value, a) / (pow(value, a) + pow(b - b * value, a)));

	int index = xyToIndex(id.xy);
	falloffMap[index] = finalValue;
}
