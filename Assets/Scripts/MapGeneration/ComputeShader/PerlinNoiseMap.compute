// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel perlinNoiseMap
#include "HexagonNoiseMap.compute"
#include "PerlinNoise2D.compute"

[numthreads(16, 16, 1)]
void perlinNoiseMap(int3 id : SV_DispatchThreadID)
{
	if (id.x >= mapWidth || id.y >= mapHeight)
	{
		return;
	}

	float2 worldPos = hexPosToWorldPos(id.xy);
	float finalValue = 0;
	float frequency = scale / 100;
	float amplitude = 1;
	float weight = 1;
	for (int i = 0; i < octaves; i++)
	{
		float noise = cnoise(worldPos * frequency + octaveOffsets[i] + offset);
		float value = (noise + 1) / 2;
        //float value = 1 - abs(noise); rigid
        //value = value * value;
		value *= weight;
		weight = max(min(value * weightMultiplier, 1), 0);

		finalValue += value * amplitude;
		amplitude *= persistance;
		frequency *= lacunarity;
	}

	finalValue *= strength;

	int index = xyToIndex(id.xy);
	noiseMap[index] = finalValue;
}
