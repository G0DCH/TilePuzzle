#pragma kernel evaluatePerlinNoise
#pragma kernel evaluateSimplexNoise
#include "PerlinNoise2D.compute"
#include "SimplexNoise2D.compute"

StructuredBuffer<float2> samplePoints;
RWStructuredBuffer<float> results;
int totalPoints;

// Noise
StructuredBuffer<float2> octaveOffsets;
float2 offset;
int octaves;
float lacunarity;
float persistance;
float scale;
float strength;
float weightMultiplier;

[numthreads(32, 1, 1)]
void evaluatePerlinNoise(int3 id : SV_DispatchThreadID)
{
    if (id.x >= totalPoints)
    {
        return;
    }
    
    float2 worldPos = samplePoints[id.x];
    float finalValue = 0;
    float frequency = scale / 100;
    float amplitude = 1;
    float weight = 1;
    for (int i = 0; i < octaves; i++)
    {
        float noise = cnoise(worldPos * frequency + octaveOffsets[i] + offset);
        float value = (noise + 1) / 2;
        //float value = 1 - abs(noise); rigid
        value = value * value;
        value *= weight;
        weight = max(min(value * weightMultiplier, 1), 0);

        finalValue += value * amplitude;
        amplitude *= persistance;
        frequency *= lacunarity;
    }

    finalValue *= strength;
    results[id.x] = finalValue;
}

[numthreads(32, 1, 1)]
void evaluateSimplexNoise(int3 id : SV_DispatchThreadID)
{
    if (id.x >= totalPoints)
    {
        return;
    }
    
    float2 worldPos = samplePoints[id.x];
    float finalValue = 0;
    float frequency = scale / 100;
    float amplitude = 1;
    float weight = 1;
    for (int i = 0; i < octaves; i++)
    {
        float noise = snoise(worldPos * frequency + octaveOffsets[i] + offset);
        float value = (noise + 1) / 2;
        //float value = 1 - abs(noise); rigid
        value = value * value;
        value *= weight;
        weight = max(min(value * weightMultiplier, 1), 0);

        finalValue += value * amplitude;
        amplitude *= persistance;
        frequency *= lacunarity;
    }

    finalValue *= strength;
    results[id.x] = finalValue;
}