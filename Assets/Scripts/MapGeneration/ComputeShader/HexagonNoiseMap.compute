static const float pi = 3.14159265;

// Map
RWStructuredBuffer<float> noiseMap;
int mapWidth;
int mapHeight;

// Hexagon
float hexagonSize;

// Noise
StructuredBuffer<float2> octaveOffsets;
float2 offset;
int octaves;
float lacunarity;
float persistance;
float scale;
float strength;
float weightMultiplier;

int xyToIndex(int2 xy)
{
    return xy.x + xy.y * mapWidth;
}

int3 arrayXYToHexPos(int2 arrayXY)
{
    int hexX = arrayXY.x - (arrayXY.y >> 1);
    int hexZ = arrayXY.y;
    return int3(hexX, -hexX - hexZ, hexZ);
}

int2 hexPosToArrayXY(int3 hexPos)
{
    int arrayX = hexPos.x + (hexPos.z >> 1);
    int arrayY = hexPos.z;
    return int2(arrayX, arrayY);
}

float2 hexPosToWorldXY(int3 hexPos)
{
    float worldX = hexPos.x * hexagonSize + hexPos.z * hexagonSize / 2;
    float worldY = hexPos.z * hexagonSize * sin(pi / 3);
	return float2(worldX, worldY);
}