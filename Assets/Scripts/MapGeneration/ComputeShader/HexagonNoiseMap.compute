#pragma kernel perlinNoiseMap
#pragma kernel simplexNoiseMap

#include "PerlinNoise2D.compute"
#include "SimplexNoise2D.compute"

static const float pi = 3.14159265;

// Map
RWStructuredBuffer<float> noiseMap;
int mapWidth;
int mapHeight;

// Hexagon
float hexagonSize;

// Noise
StructuredBuffer<float2> octaveOffsets;
float2 offset;
int octaves;
float lacunarity;
float persistance;
float scale;
float strength;
float weightMultiplier;

int xyToIndex(int2 xy)
{
    return xy.x + xy.y * mapWidth;
}

int3 arrayXYToHexPos(int2 arrayXY)
{
    int hexX = arrayXY.x - (arrayXY.y >> 1);
    int hexZ = arrayXY.y;
    return int3(hexX, -hexX - hexZ, hexZ);
}

int2 hexPosToArrayXY(int3 hexPos)
{
    int arrayX = hexPos.x + (hexPos.z >> 1);
    int arrayY = hexPos.z;
    return int2(arrayX, arrayY);
}

float2 hexPosToWorldXY(int3 hexPos)
{
    float worldX = hexPos.x * hexagonSize + hexPos.z * hexagonSize / 2;
    float worldY = hexPos.z * hexagonSize * sin(pi / 3);
    return float2(worldX, worldY);
}

[numthreads(16, 16, 1)]
void perlinNoiseMap(int3 id : SV_DispatchThreadID)
{
	if (id.x >= mapWidth || id.y >= mapHeight)
	{
		return;
	}
	
    int3 hexPos = arrayXYToHexPos(id.xy);
    float2 worldPos = hexPosToWorldXY(hexPos);
	float finalValue = 0;
	float frequency = scale / 100;
	float amplitude = 1;
	float weight = 1;
	for (int i = 0; i < octaves; i++)
	{
		float noise = cnoise(worldPos * frequency + octaveOffsets[i] + offset);
        float value = (noise + 1) / 2;
        //float value = 1 - abs(noise); rigid
        value = value * value;
		value *= weight;
		weight = max(min(value * weightMultiplier, 1), 0);

		finalValue += value * amplitude;
		amplitude *= persistance;
		frequency *= lacunarity;
	}

	finalValue *= strength;

	int index = xyToIndex(id.xy);
	noiseMap[index] = finalValue;
}

[numthreads(16, 16, 1)]
void simplexNoiseMap(int3 id : SV_DispatchThreadID)
{
    if (id.x >= mapWidth || id.y >= mapHeight)
    {
        return;
    }
    
    int3 hexPos = arrayXYToHexPos(id.xy);
    float2 worldPos = hexPosToWorldXY(hexPos);
    float finalValue = 0;
    float frequency = scale / 100;
    float amplitude = 1;
    float weight = 1;
    for (int i = 0; i < octaves; i++)
    {
        float noise = snoise(worldPos * frequency + octaveOffsets[i] + offset);
        float value = (noise + 1) / 2;
        //float value = 1 - abs(noise); rigid
        //value = value * value;
        value *= weight;
        weight = max(min(value * weightMultiplier, 1), 0);

        finalValue += value * amplitude;
        amplitude *= persistance;
        frequency *= lacunarity;
    }

    finalValue *= strength;

    int index = xyToIndex(id.xy);
    noiseMap[index] = finalValue;
}
